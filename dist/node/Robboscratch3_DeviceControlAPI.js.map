{"version":3,"file":"Robboscratch3_DeviceControlAPI.js","sources":["webpack:///webpack/bootstrap e524506fb082d07aaf52","webpack:///src/index.js","webpack:///src/Robboscratch3_DeviceControlAPI.js","webpack:///src/RobotConrolAPI.js","webpack:///src/DeviceControlAPI.js","webpack:///src/chrome.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e524506fb082d07aaf52","const Robboscratch3_DeviceControlAPI = require('./Robboscratch3_DeviceControlAPI');\n\nmodule.exports = Robboscratch3_DeviceControlAPI;\n\n\n\n// WEBPACK FOOTER //\n// src/index.js","/* @flow */\n\nimport RobotConrolAPI from './RobotConrolAPI';\n\n\nexport  {\n\n  RobotConrolAPI\n\n};\n\n\n\n// WEBPACK FOOTER //\n// src/Robboscratch3_DeviceControlAPI.js","/* @flow */\n\n\nimport DeviceControlAPI from './DeviceControlAPI';\n//import RobotSensorsData from './RobotSensorsData';\nimport {InterfaceDevice,searchDevices,getConnectedDevices,DEVICES,DEVICE_STATES} from './chrome';\n\n\nconst DEVICE_HANDLE_TIMEOUT:number = 1 * 60 * 1000;\n\ntype RobotSensorsData = {\n\n                       encoder0 :  number,\n                       encoder1 : number,\n                       path0    : number,\n                       path1    : number,\n                       a0       : [number,number,number,number],\n                       a1       : [number,number,number,number],\n                       a2       : [number,number,number,number],\n                       a3       : [number,number,number,number],\n                       a4       : [number,number,number,number],\n                       button   : number\n\n};\n\n\nconst SensorsDataRecievingStates = {\n\n    STARTED:\"STARTED\",\n    STOPED: \"STOPED\"\n\n};\n\ntype SensorsDataRecievingState = $Keys<typeof SensorsDataRecievingStates>;\n\nexport default class RobotConrolAPI extends DeviceControlAPI {\n\n  RobotSensorsDataRecievingState:SensorsDataRecievingState;\n\n  SensorsData:RobotSensorsData;\n\n  ConnectedDevices: Array<InterfaceDevice>;\n\n    constructor(){\n\n\n\n      super();\n\n      this.RobotSensorsDataRecievingState = SensorsDataRecievingStates.STOPED;\n      this.ConnectedDevices = [];\n\n     searchDevices();\n\n    var handleConnectedDevicesInterval  =  setInterval(\n\n\n        function (self){\n\n            self.ConnectedDevices = getConnectedDevices();\n            // let cd = this.ConnectedDevices;\n            // let s = this;\n          //  setInterval(handleConnectedDevices, 200, self.ConnectedDevices,self);\n\n          handleConnectedDevices(self.ConnectedDevices,self);\n\n        }\n\n\n        ,100,this);\n\n        setTimeout(function(){\n\n\n            console.log(\"Stop devices handle process.\")\n            clearInterval(handleConnectedDevicesInterval)\n\n\n\n        }  ,DEVICE_HANDLE_TIMEOUT);\n\n\n        var handleConnectedDevices = function (Devices,self:RobotConrolAPI){\n\n\n          console.log(\"Handle connected devices.\")\n\n        if ((typeof(Devices)!== 'undefined'))  {\n\n          if ((Devices.length != 0) ){\n\n              Devices.forEach(\n\n                  function (item:InterfaceDevice){\n\n                      self.startDataRecievingLoop(item);\n\n\n                  }\n\n\n\n              );\n\n\n         }\n      //    else{\n      //\n      //         setTimeout(handleConnectedDevices, 200,self.ConnectedDevices,self);\n      //\n      //   }\n      //\n      // }else{\n      //\n      //         console.log(\"devices: \" + typeof(Devices));\n      //\n      //         setTimeout(handleConnectedDevices, 200,self.ConnectedDevices,self);\n      //\n      // }\n\n        }\n\n      }\n\n}\n\n    // searchRobotDevices(){\n    //\n    //      chrome.serial.getDevices(callback);\n    //\n    // }\n\n\n  setRobotPower(leftMotorPower:number,rightMotorPower:number):void{\n\n\n\n  }\n\n\n  getSensorsData():RobotSensorsData{\n\n      return this.SensorsData;\n\n  }\n\n  getSensorData(){\n\n\n\n  }\n\n\n  runDataRecieveCommand(device:InterfaceDevice){\n\n    console.log(\"runDataRecieveCommand\");\n\n  device.command(DEVICES[0].commands.check, [], function(response){\n\n\n          this.SensorsData = response;\n\n          console.log(\"response: \" + this.SensorsData.a0);\n\n\n       });\n\n\n  }\n\n  startDataRecievingLoop(device:InterfaceDevice):void{\n\n\n      if(device.getDeviceID() == 0 && device.getState() == DEVICE_STATES[\"DEVICE_IS_READY\"]){\n\n        console.log(\" Robot ID:  \" + device.getDeviceID());\n\n\n              if (this.RobotSensorsDataRecievingState == SensorsDataRecievingStates.STOPED ){\n\n                  this.RobotSensorsDataRecievingState == SensorsDataRecievingStates.STARTED;\n\n                  setInterval(this.runDataRecieveCommand.bind(this,device),100);\n\n                }else{\n\n          console.log(\"ID: \" + device.getDeviceID()  + \" \" + \"State:  \" + device.getState() );\n\n      }\n\n      //    setInterval(this.runDataRecieveCommand.bind(this,device),100);\n\n\n\n\n\n\n\n  }\n\n\n\n}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/RobotConrolAPI.js","\nexport default  class DeviceControlAPI {\n\n    constructor(){\n\n\n\n\n    }\n\n\n\n\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// src/DeviceControlAPI.js","const DEVICE_SERIAL_NUMBER_PROBE_INTERVAL = 100;\nconst DEVICE_SERIAL_NUMBER_LENGTH = 52;\nconst DEVICE_HANDLE_TIMEOUT = 1 * 60 * 1000;\n\nconst DEVICE_STATES = Object.freeze({\n   \"INITED\": 0,\n   \"OPENED\": 1,\n   \"TEST_DATA_SENT\": 2,\n   \"RUBBISH\": 3,\n   \"SERIAL_FOUND\": 4,\n   \"PURGING\": 5,\n   \"DEVICE_IS_READY\": 6\n});\n\nconst DEVICES = Object.freeze({\n   //Basic Robot\n   0:{\n      \"firmware\":7,\n      \"commands\":{\n         \"check\":{\n            \"code\": \"a\",\n            \"params\": [],\n            \"response\": {\n                         \"encoder0\" : \"uint2\",\n                         \"encoder1\" : \"uint2\",\n                         \"path0\"    : \"uint2\",\n                         \"path1\"    : \"uint2\",\n                         \"a0\"       : \"ubyte[4]\",\n                         \"a1\"       : \"ubyte[4]\",\n                         \"a2\"       : \"ubyte[4]\",\n                         \"a3\"       : \"ubyte[4]\",\n                         \"a4\"       : \"ubyte[4]\",\n                         \"button\"   : \"ubyte\"\n                        }\n         },\n         \"power\":{\n            \"code\": \"c\",\n            \"params\": [\"ubyte\", \"ubyte\"],\n            \"response\": {\n                         \"encoder0\" : \"uint2\",\n                         \"encoder1\" : \"uint2\",\n                         \"path0\"    : \"uint2\",\n                         \"path1\"    : \"uint2\",\n                         \"a0\"       : \"ubyte[4]\",\n                         \"a1\"       : \"ubyte[4]\",\n                         \"a2\"       : \"ubyte[4]\",\n                         \"a3\"       : \"ubyte[4]\",\n                         \"a4\"       : \"ubyte[4]\",\n                         \"button\"   : \"ubyte\"\n                        }\n         },\n         \"sensors\":{\n            \"code\": \"i\",\n            \"params\": [\"ubyte\", \"ubyte\", \"ubyte\", \"ubyte\", \"ubyte\"],\n            \"response\": {\n                         \"encoder0\" : \"uint2\",\n                         \"encoder1\" : \"uint2\",\n                         \"path0\"    : \"uint2\",\n                         \"path1\"    : \"uint2\",\n                         \"a0\"       : \"ubyte[4]\",\n                         \"a1\"       : \"ubyte[4]\",\n                         \"a2\"       : \"ubyte[4]\",\n                         \"a3\"       : \"ubyte[4]\",\n                         \"a4\"       : \"ubyte[4]\",\n                         \"button\"   : \"ubyte\"\n                        }\n         }\n      }\n   },\n\n   //Old lab\n   1:{\n   }\n});\n\n\nvar arrDevices = [];\n\n\n\nfunction InterfaceDevice(port){\n   this.port = port;\n   var LOG = \"[\" + port.path + \"] \";\n\n   console.log(LOG + \"Trying to register a new device...\");\n\n   var state = DEVICE_STATES[\"INITED\"];\n   var bufIncomingData = new Uint8Array();\n   var iConnectionId;\n   var iDeviceID;\n   var iFirmwareVersion;\n   var sSerialNumber;\n   var iSerialNumberOffset;\n   var iWaiting = 0;\n   var response = {};\n   var commandToRun = null;\n   var callback = null;\n\n   var isStopCheckingPort = false;\n\n   var onReceiveCallback = function(info){\n      if(info.connectionId == iConnectionId && info.data){\n         var buf = new Uint8Array(info.data);\n         console.log(LOG + \"<- \" + buf.length);\n         var bufIncomingDataNew = new Uint8Array(bufIncomingData.length + buf.length);\n         bufIncomingDataNew.set(bufIncomingData);\n         bufIncomingDataNew.set(buf, bufIncomingData.length);\n\n         bufIncomingData = bufIncomingDataNew;\n\n         //We are not waiting for any data;\n         if(commandToRun == null) return;\n\n\n         if(bufIncomingData.length >= iWaiting){\n            console.log(LOG + \"command '\" + commandToRun.code + \"' complete.\");\n\n            //all params\n            var iResponsePointer = 1;\n            Object.keys(commandToRun.response).forEach(function (sField){\n               switch(commandToRun.response[sField]){\n                  case \"uint2\":{\n                     response[sField] = bufIncomingData[iResponsePointer] * 256 + bufIncomingData[iResponsePointer + 1];\n                     iResponsePointer += 2;\n                     break;\n                  }\n                  case \"ubyte[4]\":{\n                     response[sField] = [];\n                     response[sField].push(bufIncomingData[iResponsePointer]);\n                     response[sField].push(bufIncomingData[iResponsePointer + 1]);\n                     response[sField].push(bufIncomingData[iResponsePointer + 2]);\n                     response[sField].push(bufIncomingData[iResponsePointer + 3]);\n                     iResponsePointer += 2;\n                     break;\n                  }\n                  case \"ubyte\":{\n                     response[sField] = bufIncomingData[iResponsePointer];\n                     iResponsePointer += 1;\n                     break;\n                  }\n               }\n            });\n\n            //console.log(response);\n            commandToRun = null;\n            iWating = 0;\n            callback(response);\n         }\n      }\n   };\n\n\n   var onSend = function(){\n      console.log(LOG + \"buffer sent.\");\n   };\n   var onFlush = function(){\n      console.log(LOG + \"port flushed.\");\n   }\n\n   var purgePort = function(){\n      console.log(LOG + \"purge()\");\n      state = DEVICE_STATES[\"PURGE\"];\n      if(bufIncomingData.length > 0){\n         chrome.serial.flush(iConnectionId, onFlush);\n         bufIncomingData = new Uint8Array();\n         setTimeout(purgePort, 300);\n      }\n      else{\n         console.log(LOG + \"device is ready.\");\n         state = DEVICE_STATES[\"DEVICE_IS_READY\"];\n      }\n   }\n\n\n   var getSerial = function(){\n      console.log(LOG + \"-> getSerial()\");\n      var buf=new ArrayBuffer(1);\n      var bufView=new Uint8Array(buf);\n      bufView[0] = 32;\n      chrome.serial.send(iConnectionId, buf, onSend);\n      state = DEVICE_STATES[\"TEST_DATA_SENT\"];\n   }\n\n   var checkSerialNumber = function(){\n      console.log(LOG + \"let's check the serial\");\n\n      var sIncomingData = new TextDecoder(\"utf-8\").decode(bufIncomingData);\n      console.log(LOG + \"Now we have: \" + sIncomingData);\n\n      if(bufIncomingData.length > DEVICE_SERIAL_NUMBER_PROBE_INTERVAL){\n         iSerialNumberOffset = sIncomingData.indexOf(\"ROBBO\");\n         if(iSerialNumberOffset < 0){\n            console.log(LOG + \"Rubbish instead of serial number\");\n            state = DEVICE_STATES[\"RUBBISH\"];\n         }\n         else{\n            iDeviceID        = parseInt(sIncomingData.substring(iSerialNumberOffset + 6, iSerialNumberOffset + 11));\n            iFirmwareVersion = parseInt(sIncomingData.substring(iSerialNumberOffset + 12, iSerialNumberOffset + 17));\n            sSerialNumber    = sIncomingData.substring(iSerialNumberOffset + 18, iSerialNumberOffset + DEVICE_SERIAL_NUMBER_LENGTH);\n            console.log(LOG + \"Device=\" + iDeviceID + \" Firmware=\" + iFirmwareVersion + \" Serial='\" + sSerialNumber + \"'\");\n\n            purgePort();\n         }\n      }\n      else{\n         if((sSerialNumber === undefined) && (!isStopCheckingPort)) {\n            //Let's send the space\n            getSerial();\n\n            //Let's check the response\n             let checkSerialNumberTimeout =   setTimeout(checkSerialNumber, 300); //100\n\n         }\n      }\n   }\n\n   var onConnect = function(connectionInfo){\n      console.log(LOG + \"connected.\");\n      state = DEVICE_STATES[\"CONNECTED\"];\n\n      iConnectionId = connectionInfo.connectionId;\n\n      chrome.serial.onReceive.addListener(onReceiveCallback);\n\n      checkSerialNumber();\n\n      setTimeout(function(){\n\n\n          console.log(\"Stop checking serial number.\")\n        //  clearTimeout(checkSerialNumberTimeout);\n          isStopCheckingPort = true;\n\n\n\n      }  ,DEVICE_HANDLE_TIMEOUT);\n   }\n\n\n   chrome.serial.connect(port.path, {bitrate: 115200}, onConnect);\n\n\n   this.getState = function(){\n      return state;\n   }\n\n   this.getDeviceID = function(){\n      return iDeviceID;\n   }\n\n   this.getPortName = function(){\n      return this.port.path;\n   }\n\n   this.command = function(command, params, fCallback){\n    //  if(commandToRun != null) return;                    //???\n      commandToRun = command;\n\n      bufIncomingData = new Uint8Array();\n      var buf=new ArrayBuffer(command.code.length + params.length + 1);\n      var bufView=new Uint8Array(buf);\n      var bufCommand = new TextEncoder(\"utf-8\").encode(command.code);\n      bufView.set(bufCommand);\n\n      var iParamOffset = 0;\n      params.forEach(function(param){\n         bufView[bufCommand.length + iParamOffset] = param;\n         iParamOffset++;\n      });\n\n      bufView[bufCommand.length + iParamOffset] = 36;\n\n      //console.log(buf);\n\n      chrome.serial.send(iConnectionId, buf, onSend);\n\n      //for #\n      var iWaitingNew = 1;\n\n      //all params\n      Object.keys(command.response).forEach(function (sField){\n         switch(command.response[sField]){\n            case \"uint2\":{\n               iWaitingNew += 2;\n               break;\n            }\n            case \"ubyte[4]\":{\n               iWaitingNew += 4;\n               break;\n            }\n            case \"ubyte\":{\n               iWaitingNew += 1;\n               break;\n            }\n         }\n      });\n\n      callback = fCallback;\n\n      console.log(LOG + \"we wating for \" + iWaitingNew + \" bytes\");\n      iWaiting = iWaitingNew;\n   }\n\n\n   // var onGetDevices = function(ports) {\n   //   for (var i=0; i<ports.length; i++) {\n   //     console.log(ports[i].path);\n   //     var device = new InterfaceDevice(ports[i]);\n   //      arrDevices.push(device);\n   //   }\n   // }\n   //\n   // this.searchDevices(callback){\n   //\n   //    chrome.serial.getDevices(callback);\n   //\n   // }\n   //\n   //\n   // this.getConnectedDevices(){\n   //\n   //\n   //\n   // }\n\n\n}\n\n\nconst searchDevices = function(){\n\n  var onGetDevices = function(ports) {\n    for (var i=0; i<ports.length; i++) {\n      console.log(ports[i].path);\n      var device = new InterfaceDevice(ports[i]);\n       arrDevices.push(device);\n    }\n  }\n\n    chrome.serial.getDevices(onGetDevices);\n\n};\n\nconst getConnectedDevices = function(){\n\n    return arrDevices;\n\n}\n\n\n\n// var fuck = false;\n// var mainLoop = function(){\n//    arrDevices.forEach(function(device) {\n//       if(device.getDeviceID() == 0 && device.getState() == DEVICE_STATES[\"DEVICE_IS_READY\"]){\n//\n//          if(!fuck){\n//             device.command(DEVICES[0].commands.sensors, [7, 0, 0, 0, 0], function(response){\n//                console.log(\"pizda=\" + response.a0);\n//             });\n//             fuck = true;\n//             return;\n//          }\n//          device.command(DEVICES[0].commands.power, [0, 0], function(response){\n//             console.log(\"pizda=\" + response.a0);\n//          });\n//       }\n//    });\n//\n//    setTimeout(mainLoop, 100);\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport  {\n\n  InterfaceDevice,\n  searchDevices,\n  getConnectedDevices,\n  DEVICES,\n  DEVICE_STATES\n\n\n};\n\n// chrome.app.runtime.onLaunched.addListener(function() {\n//   // Center window on screen.\n//   var screenWidth = screen.availWidth;\n//   var screenHeight = screen.availHeight;\n//   var width = 500;\n//   var height = 300;\n//\n//\n//   chrome.serial.getDevices(onGetDevices);\n//   mainLoop();\n//\n//\n//   chrome.app.window.create('index.html', {\n//     id: \"helloWorldID\",\n//     outerBounds: {\n//       width: width,\n//       height: height,\n//       left: Math.round((screenWidth-width)/2),\n//       top: Math.round((screenHeight-height)/2)\n//     }\n//   });\n// });\n\n\n\n// WEBPACK FOOTER //\n// src/chrome.js"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC7DA;AACA;AACA;;;;;;;;;;;;;;ACAA;AACA;;;;;AAIA;;;;;;;;;;;;;;;ACJA;AACA;;;AACA;AACA;;;;;;;;AAFA;AACA;AACA;AAEA;AACA;AAiBA;AACA;AACA;AACA;AACA;AAJA;AACA;AAQA;;;AAQA;AAAA;AACA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAhFA;AAiFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;;;AAOA;AACA;AACA;AAEA;;;AAEA;;;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAIA;;;;;;AAvKA;;;;;;;;;;;;;;;AClCA;AAEA;AAKA;AACA;AARA;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAHA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAHA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAHA;AAjCA;AAFA;AACA;AAqDA;AACA;AAzDA;AACA;AA6DA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAnBA;AAqcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;A","sourceRoot":""}